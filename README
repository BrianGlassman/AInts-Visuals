Brian Glassman
CSCI 5229 (graduate)
Time Spent: approximately 150 hours
	I spent a long time thinking about perturbations, normals, and buildings

1. To build and run
	"make" will build
	"./final" will execute

2. Interface
	A. Both views
		- Escape will exit the program
		- Right clicking opens menus for building, changing the view, and accessing various debug options (detailed below)
		- "[" and "]" will cycle through the available scenes: A full colony (the main, default scene), individual views of the different buildings, and a test of tunnel interconnection.
		- "\" will go back to the full colony scene
		- "m" will cycle between interior and exterior views
		- "-" and "=" will decrease or increase, respectively, the ambient light levels. "_" and "+" will do the same for the directed light
		- "n" and "N" will decreate or increase, respectively, the scaling factor applied to perturbation effects. A factor near or above 0.5 may cause crossovers and degenerate geometry.
	B. Exterior view
		- Moving the mouse towards the edges of the window will rotate the camera around the origin
		- The red square shows where the eye position for the interior view is located
		- IJKL (up, clockwise, down, CCW) will move the directed light source
		- When placing/deleting a building
				1. Right-Click > Build > Select what to build
				2. WASD or the arrow keys will move the "cursor" in the XZ plane, "R" and "F" will move along the Y axis
					These directions are locked to world coordinates, with D along the +X axis, W along -Z, etc.
				3. Space bar to execute the command, either placing a new building or deleting an existing one
	C. Interior (first person) view
		- Moving the mouse towards the edges of the window will rotate the view around the current eye position
		- WASD or the arrow keys will move the viewpoint, node by node. Movement is locked to the centerline nodes shown in cyan

3. Right-Click menu
	A. Build - allows building new structures or deleting existing ones. Select "None" to hide the visual indicator
	B. View - change between interior and exterior views
	C. Lighting - toggle the ambient or directed light, toggle the orbit of the directed light
	D. Noise
		- Toggle perturbed geometry - show/hide the geometry that has been randomly perturbed
		- Toggle P vectors - show/hide the random vectors that are used to create the perturbations
		- Toggle base geometry - show/hide the base, unperturbed geometry
			note: if both geometries are shown, base will be in wireframe mode
		- Toggle Bezier fade - switch between using a Bezier curve or linear interpolation for fading the noise between cell corners
	E. Gizmos - toggle various settings
		- Wireframe / Filled
		- Show/hide axes
		- Show/hide normal vectors
		- Show/hide centerline nodes
		- Console printout to debug movement from interior view
		- Toggle face culling
		- Cycle through different modes for setting colors: glColor4f, glMaterialfv, both (default)
			Note: hopefully one of these options will work in the case of hardware-specific graphical problems

4. Feature List
	A. Predefined colony layout, displayed on startup.
	B. Adjacent structures connect to each other appropriately, automatically updating when new structures are placed or existing structures are deleted.
	C. 3D texturing via shader - Y position chooses one of 16 texture slices, X and Z position determine the location on that texture. Adjacent slices are blended together to avoid sharp cuts.
	D. Ambient lighting and an orbiting directed light.
	E. Random perturbations of geometry - A grid of random vectors is created, and the perturbation is the result of interpolating between the 8 nearest vectors.
		- The perturbed and original geometries can be toggled from the Right-Click > Noise menu.
		- Each "cell" is 1x1x1 units, with a perturbation vector at each corner. The perturbation vectors can be shown/hidden from the Right-Click menu: Noise > Toggle P Vectors.
		- The interpolation is based on f(x,y,z) where f is a Bezier curve (defined in Noise/Perlin.cpp::BezierFade). This prevents sharp changes at the borders between cells.
		- Crossover is mathematically impossible due to the nature of the perturbation with scaling factors less than approximately 0.5
			"crossover" meaning adjacent vertices being perturbed enough that they switch relative positions
		- Normal vectors are perturbed to match the new geometry through the following process (implemented in Structures/Models.cpp::Model::ApplyNoiseHelper):
			1. Take the cross product of the unperturbed Normal vector with each of the X, Y, and Z axes. This creates three tangent vectors based on the unperturbed geometry.
			2. Reduce the magnitude of these tangent vectors to a small value (0.001) to remain in the neighborhood of the original vertex.
			3. Get the three positions produced by offsetting from the original vertex by the tangent vector (i.e. position = vertex + tangent).
			4. Perturb these positions using the same method as used for the vertex.
			5. The difference between these perturbed positions and the perturbed vertex are the tangent vectors of the underlying perturbed surface.
			6. Using whichever two perturbed tangent vectors are most orthogonal to each other, take the cross product to find the perturbed Normal vector.
			7. If the resulting Normal vector is roughly opposite the original Normal vector (i.e. the dot product is < 0) reverse the direction.
	F. Four different structures: Tunnel, Chamber, Hill, and Mine.
		- The Tunnel, Chamber, and Hill geometry is defined in code.
		- The Mine model was created in MagicaVoxel, with some code written to merge the edges of the voxel model with the surrounding Chamber geometry.
			- It is modelled as 7 separate OBJs to allow opening/closing the side tunnels based whether there is an adjacent structure.
	G. Exterior View, showing the colony as a whole. In the final game, this will be the primary construction and interaction view.
		- The user can place new buildings or delete existing ones, selected from the Right-Click > Build menu.
		- A visualization is shown when building/deleting so that the user knows where the change will occur.
	H. Interior View, showing the colony from the perspective of a resident.
		- The user can move around the colony, following pre-defined paths. Movement is node-to-node along whichever path is closest to the desired direction.

5. Code Structure
	- MainLib: core functionality, including most of the OpenGL interaction
	- Menus: Right-Click menus
	- Noise: The noise generation system, implemented as a base and derived class for possible future work
	- Objects: OBJ related files, processing, and interface wrapper
	- Shaders: The shader code itself, as well as a wrapper for switching between shaders or fixed pipeline
	- Structures: The buildings/structures used in the colony
		Note: Tunnels are composed of 8 Corners to reduce the number of mesh configurations needed
	- Textures: The texture BMPs
	- ./final.hpp and ./final.cpp: the top-level runner script, split into hpp/cpp for readability

6. Known Issues
	A. Errors out if the last building is deleted.
	B. Low framerate in fullscreen, likely because of the computations involved in 3D texturing.
	C. The Right-Click > Build menu is visible in Interior View, although it has no effect.
	D. Placing/deleting a building re-generates geometry for the entire colony, which can get very slow if there are multiple mines

7. Future Work
	A. Add more variety in the textures, and/or using a noise algorithm to generate the 3D texture rather than slicing a 2D texture.
	B. Add functionality for merging adjacent chambers, rather than connecting them with a short tunnel.
	C. Add shadowing and multiple light sources, especially for the Interior View.
	D. Add more buildings, and using non-voxel geometry for the buildings.
	E. Add the option of a cutaway view in Exterior View, so that the user can look into the colony from outside.
	F. Add ants populating the colony.
	G. Add animations to the ants and buildings.
	H. Allow freeform movement in Interior View, rather than being tethered to a pre-defined path.
	I. Investigate other noise algorithms
	J. Optimizations and performance improvements, as well as more robust error handling

8. Texture sources:
dirtGroundTileable - https://www.deviantart.com/fabooguy/art/Dirt-Ground-Texture-Tileable-2048x2048-441212191
	Sliced to create the various _x#_y# textures

9. Code references:
Class slides, examples and examples used to varying degrees
Shader processing largely taken from Ex. 25, with modification to work for 3D texturing
Heavy usage of the CSCIx229 library
Polymorphic list - https://stackoverflow.com/questions/17532076/whats-the-preferred-c-idiom-to-own-a-collection-of-polymorphic-objects
GLUT menus
	http://www.cs.sjsu.edu/~bruce/fall_2016_cs_116a_lecture_creating_mouse_driven_menus.html
	http://www.cs.sjsu.edu/~bruce/programs/fall_2016_cs_116a/example_glut_menu/example_glut_menu.c
	https://www.opengl.org/resources/libraries/glut/spec3/node35.html
Various other sources for small snippets, linked in comments where used

10. Tool references:
MagicaVoxel - A voxel modelling program, used to generate the Mine geometry - https://www.voxelmade.com/magicavoxel/
Magick - An image manipulation tool, used to split the dirt texture into several slices - https://imagemagick.org/
